Python, Java, C#, C++
    - multithreading
        - resource intensive (1 MB)
        - maintainable

Node.js
    - Single Threaded Event Loop
    - resource light
    - difficult to maintain (for CPU intensive operations)


Go
    concurrency is a LANGUAGE FEATURE
            go, chan, select, range
        go routines
        Internal scheduler  (built in the runtime)
        thousands of goroutines can be executed in a SINGLE Thread
        ONLY 2 kb / goroutine

    Simple Language
        ONLY 25 keywords
        NO classes (func [behavior], struct [state], interface [abstraction])
            Prefer composition over inheritence
        No access modifiers
        Support for modules
        Package management is builtin as a part of the go tooling infrastructure
        Support for pointers
        Support for Higher order functions
            functions as data
            functions can be assigned to variables
            functions can be passed as arguments to other functions
            functions can be returned as return values


Class
    Blueprint for an object
    Encapsulation of State & Behavior
        Prefer composition over inheritence


Languge Basics
SDK
Concurrency
Services
Misc
    Testing
    Benchmarking


Language Features
1. Variables
2. Contants
3. Datatypes
    bool
    string
    uint
        uint8
        unit16
        unit32
        uint64
    int
        int8
        int16
        int32
        int64
    
    float32
    float64

    complex64
    complex128

    byte (alias for uint8)
    rune (alias for int32) (respresents a Unicode code point)

    array
        fixed length
        of the same type
        use indexer to access the values
        
    slice
        built on array (internally uses an array)
        can be of varying size
        it has to be of the same type
        supports the slice operation

    map
        collection of key/value pairs
        dynamic size
        type of the key and type of the value can vary

4 Type Conversion
    GOLANG do not support implicity type conversion (all type conversions have to be explicit).
    syntax = Type(Value)

5. Closure

Web Server
1. Listen on a port
2. Handle the incoming the requests
    - static resources (html, css, js, images)
    - dynamic resources
        html
            Classical Web Applications
            use template engines to generate the html
        json
            Rich Internet Applications
            HTML is generated on the client side
            client side app is built using Angular / React / Vue.js
            Client is a BROWSER

        Application = composition of services

        Data
            transactional
                changes frequently
                Write optimized (maintaining the integrity of the data)
            non-transactional
                doesnt change frequently
                mostly append only
                read optimized
            analytical
                processed

    gin-gonic - Web framework for go applications
    gorm - ORM for go applications


gRPC
http/2

protobuf compiler installation
on mac
brew install protobuf


The following commands are in the setup.sh

#!/bin/bash

#####
go get -u github.com/golang/protobuf/{proto,protoc-gen-go}
go get -u google.golang.org/grpc
protoc --go_out=plugins=grpc:. greet/greetpb/*.proto